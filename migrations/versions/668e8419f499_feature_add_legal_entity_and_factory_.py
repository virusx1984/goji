"""Feature: Add legal entity and factory cluster models

Revision ID: 668e8419f499
Revises: f16a8a6ee179
Create Date: 2025-08-09 20:49:24.213838

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '668e8419f499'
down_revision = 'f16a8a6ee179'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create the 'gj_legal_entities' table
    legal_entities_table = op.create_table('gj_legal_entities',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=255), nullable=False),
        sa.Column('tax_id', sa.String(length=100), nullable=True),
        sa.Column('address', sa.String(length=500), nullable=True),
        sa.Column('legal_rep', sa.String(length=100), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=False, server_default=sa.func.now()),
        sa.Column('updated_at', sa.DateTime(), nullable=False, server_default=sa.func.now()),
        sa.Column('created_by_id', sa.Integer(), nullable=True),
        sa.Column('updated_by_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['created_by_id'], ['gj_users.id'], name=op.f('fk_gj_legal_entities_created_by_id_gj_users')),
        sa.ForeignKeyConstraint(['updated_by_id'], ['gj_users.id'], name=op.f('fk_gj_legal_entities_updated_by_id_gj_users')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_gj_legal_entities')),
        sa.UniqueConstraint('name', name=op.f('uq_gj_legal_entities_name'))
    )
    with op.batch_alter_table('gj_legal_entities', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_gj_legal_entities_tax_id'), ['tax_id'], unique=True)

    # Insert a default record into 'gj_legal_entities'
    op.bulk_insert(legal_entities_table,
        [{'id': 1, 'name': 'Default Legal Entity'}]
    )

    # Create the 'gj_factory_clusters' table
    factory_clusters_table = op.create_table('gj_factory_clusters',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('bu_id', sa.Integer(), nullable=False),
        sa.Column('legal_entity_id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False, server_default=sa.func.now()),
        sa.Column('updated_at', sa.DateTime(), nullable=False, server_default=sa.func.now()),
        sa.Column('created_by_id', sa.Integer(), nullable=True),
        sa.Column('updated_by_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['bu_id'], ['gj_business_units.id'], name=op.f('fk_gj_factory_clusters_bu_id_gj_business_units')),
        sa.ForeignKeyConstraint(['created_by_id'], ['gj_users.id'], name=op.f('fk_gj_factory_clusters_created_by_id_gj_users')),
        sa.ForeignKeyConstraint(['legal_entity_id'], ['gj_legal_entities.id'], name=op.f('fk_gj_factory_clusters_legal_entity_id_gj_legal_entities')),
        sa.ForeignKeyConstraint(['updated_by_id'], ['gj_users.id'], name=op.f('fk_gj_factory_clusters_updated_by_id_gj_users')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_gj_factory_clusters')),
        sa.UniqueConstraint('name', name=op.f('uq_gj_factory_clusters_name'))
    )
    
    # --- START: THIS IS THE CRITICAL ADDED CODE ---
    # Insert a default cluster so the foreign key constraint from gj_plants can be created.
    # We assume a default Business Unit with id=1 already exists from the seed command.
    op.bulk_insert(factory_clusters_table,
        [
            {
                'id': 1,
                'name': 'Default Cluster',
                'bu_id': 1,
                'legal_entity_id': 1
            }
        ]
    )
    # --- END: THIS IS THE CRITICAL ADDED CODE ---

    # Alter the 'gj_business_units' table
    with op.batch_alter_table('gj_business_units', schema=None) as batch_op:
        batch_op.add_column(sa.Column('description', sa.String(length=500), nullable=True))
        # Note: The server_defaults were correctly added here in the original file
        batch_op.add_column(sa.Column('created_at', sa.DateTime(), nullable=False, server_default=sa.func.now()))
        batch_op.add_column(sa.Column('updated_at', sa.DateTime(), nullable=False, server_default=sa.func.now()))
        batch_op.add_column(sa.Column('created_by_id', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('updated_by_id', sa.Integer(), nullable=True))
        batch_op.create_foreign_key(batch_op.f('fk_gj_business_units_updated_by_id_gj_users'), 'gj_users', ['updated_by_id'], ['id'])
        batch_op.create_foreign_key(batch_op.f('fk_gj_business_units_created_by_id_gj_users'), 'gj_users', ['created_by_id'], ['id'])

    # Alter the 'gj_plants' table
    with op.batch_alter_table('gj_plants', schema=None) as batch_op:
        # Note: The server_default was correctly added here in the original file
        batch_op.add_column(sa.Column('cluster_id', sa.Integer(), nullable=False, server_default='1'))
        batch_op.add_column(sa.Column('address', sa.String(length=500), nullable=True))
        batch_op.add_column(sa.Column('created_at', sa.DateTime(), nullable=False, server_default=sa.func.now()))
        batch_op.add_column(sa.Column('updated_at', sa.DateTime(), nullable=False, server_default=sa.func.now()))
        batch_op.add_column(sa.Column('created_by_id', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('updated_by_id', sa.Integer(), nullable=True))
        batch_op.drop_constraint('uq_gj_plants_name', type_='unique') # The original file had a f-string here which is fine too
        batch_op.create_foreign_key(batch_op.f('fk_gj_plants_cluster_id_gj_factory_clusters'), 'gj_factory_clusters', ['cluster_id'], ['id'])
        batch_op.create_foreign_key(batch_op.f('fk_gj_plants_created_by_id_gj_users'), 'gj_users', ['created_by_id'], ['id'])
        batch_op.create_foreign_key(batch_op.f('fk_gj_plants_updated_by_id_gj_users'), 'gj_users', ['updated_by_id'], ['id'])

    # ### end Alembic commands ###

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('gj_plants', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('fk_gj_plants_updated_by_id_gj_users'), type_='foreignkey')
        batch_op.drop_constraint(batch_op.f('fk_gj_plants_created_by_id_gj_users'), type_='foreignkey')
        batch_op.drop_constraint(batch_op.f('fk_gj_plants_cluster_id_gj_factory_clusters'), type_='foreignkey')
        batch_op.create_unique_constraint(batch_op.f('uq_gj_plants_name'), ['name'], postgresql_nulls_not_distinct=False)
        batch_op.drop_column('updated_by_id')
        batch_op.drop_column('created_by_id')
        batch_op.drop_column('updated_at')
        batch_op.drop_column('created_at')
        batch_op.drop_column('address')
        batch_op.drop_column('cluster_id')

    with op.batch_alter_table('gj_business_units', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('fk_gj_business_units_created_by_id_gj_users'), type_='foreignkey')
        batch_op.drop_constraint(batch_op.f('fk_gj_business_units_updated_by_id_gj_users'), type_='foreignkey')
        batch_op.drop_column('updated_by_id')
        batch_op.drop_column('created_by_id')
        batch_op.drop_column('updated_at')
        batch_op.drop_column('created_at')
        batch_op.drop_column('description')

    op.drop_table('gj_factory_clusters')
    with op.batch_alter_table('gj_legal_entities', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_gj_legal_entities_tax_id'))

    op.drop_table('gj_legal_entities')
    # ### end Alembic commands ###
